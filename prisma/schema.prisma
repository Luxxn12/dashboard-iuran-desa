// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(RESIDENT)
  address       String?
  phoneNumber   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  payments      Payment[]
  notifications Notification[]
  transactions  Transaction[]  // Add this relation
}

enum Role {
  ADMIN
  RESIDENT
}

model Contribution {
  id              String             @id @default(cuid())
  title           String
  description     String
  targetAmount    Float
  collectedAmount Float              @default(0)
  startDate       DateTime
  endDate         DateTime
  status          ContributionStatus @default(ACTIVE)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  payments        Payment[]
  transactions    Transaction[]      // Add this relation
}

enum ContributionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Payment {
  id              String        @id @default(cuid())
  amount          Float
  status          PaymentStatus
  paymentMethod   String?
  transactionId   String?
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  contribution    Contribution  @relation(fields: [contributionId], references: [id])
  contributionId  String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transaction     Transaction?  @relation(fields: [transactionId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Notification {
  id          String    @id @default(cuid())
  title       String
  message     String
  isRead      Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
}

model Setting {
  key       String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New Transaction model
model Transaction {
  id              String            @id @default(cuid())
  amount          Float
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  description     String?
  paymentMethod   String?
  receiptNumber   String?           @unique
  paymentProof    String?
  notes           String?
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  contribution    Contribution?     @relation(fields: [contributionId], references: [id])
  contributionId  String?
  payments        Payment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum TransactionType {
  PAYMENT
  REFUND
  ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
